from random import randint
# from termcolor import colored, cprint
# from colorama import Fore,Back,Style

# functions ==============================================================
def status():
    print("\n", character, "[", edge, heart, iron, shadow, wits, "] Momentum =", momentum, "Health =", health, "Spirit =", spirit, "Supply =", supply, "\n")

def status_long():
    print("\n", character, "[ Edge =", edge, "Heart =", heart, "Iron =", iron, "Shadow =", shadow, "Wits =", wits, "] Momentum =", momentum, "Health =", health, "Spirit =", spirit, "Supply =", supply, "\n")

def moves():
    print("\nSystem:")
    print("l - list of moves etc    z - status (also zl)      o - (blank)                 q - quit")
    print("r - roll dice           d6 - roll a d6          2d10 - roll two d10s        d100 - roll a d100")
    print("\nAdventure moves:")
    print("1 - face danger          2 - secure an advantage   3 - gather information      4 - heal")
    print("5 - resupply             6 - make camp             7 - undertake a journey     8 - reach your destination")
    print("\nRelationship moves:")
    print("11 - compel             12 - sojourn              13 - draw the circle        14 - forge a bond")
    print("15 - test your bond     16 - aid your ally        17 - write your epilogue")
    print("\nCombat moves:")
    print("21 - enter the fray     22 - strike               23 - clash                  24 - turn the tide")
    print("25 - end the fight      26 - battle         lc or 27 - list of other moves to make in combat")
    print("\nSuffer moves:")
    print("31 - endure harm*       32 - face death           33 - companion endure harm  34 - endure stress *")
    print("35 - face desolation    36 - out of supply        37 - face a setback")
    print("\nQuest moves:")
    print("41 - swear an iron vow  42 - reach a milestone    43 - fulfill your vow       44 - forsake your vow  45 - advance")
    print("\nFate moves:")
    print("51 - pay the price*     52 - ask the oracle*                        * add t after the number for table (e.g. 31t)")
    print("\n")

def oracle():
    print("\n\n------")
    print("Oracle")
    print("------")
    print("(Not yet implemented)")

def face_danger():
    print("\n\n---------------")
    print("Face Danger [1]")
    print("---------------")
    print("When you attempt something risky or react to an imminent threat, envision")
    print("your action and roll. If you act...")
    print("- With speed, agility, or precision: Roll +edge.")
    print("- With charm, loyalty, or encourage: Roll +heart.")
    print("- With aggressive action, forceful defense, strength, or endurance: Roll")
    print("  +iron.")
    print("- With deception, stealth, or trickery: Roll +shadow.")
    print("- With expertise, insight, or observation: Roll +wits.")
    print("")
    print("On a STRONG HIT, you are successful. Take +1 momentum.")
    print("")
    print("On a WEAK HIT, you succeed, but face a troublesome cost. Choose one.")
    print("- You are delayed, lose advantage, or face a new danger: Suffer -1")
    print("  momentum.")
    print("- You are tired or hurt: Endure Harm (1 harm).")
    print("- You are dispirited or afraid: Endure Stress (1 stress).")
    print("- You sacrifice resources: Suffer -1 supply.")
    print("")
    print("On a MISS, you fail, or your progress is undermined by a dramatic and")
    print("costly turn of events. Pay the Price.")
    status()

def secure_an_advantage():
    print("\n\n-----------------------")
    print("Secure an Advantage [2]")
    print("-----------------------")
    print("When you assess a situation, make preparations, or attempt to gain")
    print("leverage, envision your action and roll. If you act...")
    print("- With speed, agility, or precision: Roll +edge.")
    print("- With charm, loyalty, or encourage: Roll +heart.")
    print("- With aggressive action, forceful defense, strength, or endurance: Roll")
    print("  +iron.")
    print("- With deception, stealth, or trickery: Roll +shadow.")
    print("- With expertise, insight, or observation: Roll +wits.")
    print("")
    print("On a STRONG HIT, you gain advantage. Choose one.")
    print("- Take control: Make another move now (not a progress move), and add +1.")
    print("- Prepare to act: Take +2 momentum")
    print("")
    print("On a WEAK HIT, your advantage is short-lived. Take +1 momentum.")
    print("")
    print("On a MISS, you fail or your assumptions betray you. Pay the Price.")
    status()

def gather_information():
    print("\n\n----------------------")
    print("Gather Information [3]")
    print("----------------------")
    print("When you search an area, ask questions, conduct an investigation, or")
    print("follow a track, roll +wits. If you act within a community or ask questions")
    print("of a person with whom you share a bond, add +1.")
    print("")
    print("On a STRONG HIT, you discover something helpful and specific. The path you")
    print("must follow or action you must take to make progress is made clear.")
    print("Envision what you learn (Ask the Oracle if unsure), and take +2 momentum.")
    print("")
    print("On a WEAK HIT, the information complicates your quest or introduces a new")
    print("danger. Envision what you discover (Ask the Oracle if unsure), and take")
    print("+1 momentum.")
    print("")
    print("On a MISS, your investigation unearths a dire threat or reveals an")
    print("unwelcome truth that undermines your quest. Pay the Price.")
    status()

def heal():
    print("\n\n--------")
    print("Heal [4]")
    print("--------")
    print("When you treat an injury or ailment, roll +wits. If you are mending your")
    print("own wounds, roll +wits or +iron, whichever is lower.")
    print("")
    print("On a STRONG HIT, your care is helpful If you (or the ally under your care)")
    print("have the wounded conditions, you may clear it. Then, take or give up to +2")
    print("health.")
    print("")
    print("On a WEAK HIT, as above, but you must suffer -1 supply or -1 momentum")
    print("(your choice)")
    print("")
    print("On a MISS, your aid is ineffective. Pay the Price.")
    status()

def resupply():
    print("\n\n------------")
    print("Resupply [5]")
    print("------------")
    print("When you hunt, forage, or scavenge, roll +wits.")
    print("")
    print("On a STRONG HIT, you bolster your resources. Take +2 supply.")
    print("")
    print("On a WEAK HIT, take up to +2 supply, but suffer -1 momentum for each.")
    print("")
    print("On a MISS, you find nothing helpful. Pay the Price.")
    status()

def make_camp():
    print("\n\n-------------")
    print("Make Camp [6]")
    print("-------------")
    print("When you rest and recover for several hours in the wild, roll +supply.")
    print("")
    print("On a STRONG HIT, you and your allies may each choose two. Ona WEAK HIT,")
    print("choose one.")
    print("- Recuperate: Take +1 health for you and any companions.")
    print("- Partake: Suffer -1 supply and take +1 health for you and any companions.")
    print("- Relax: Take +1 spirit.")
    print("- Focus: Take +1 momentum.")
    print("- Prepare: When you break camp, add +1 if you Undertake a Journey.")
    print("")
    print("On a MISS, you take no comfort. Pay the Price.")
    status()

def undertake_a_journey():
    print("\n\n-----------------------")
    print("Undertake a Journey [7]")
    print("-----------------------")
    print("When you travel across hazardous or unfamiliar lands, set the rank of your")
    print("journey.")
    print("- Troublesome journey: 3 progress per waypoint.")
    print("- Dangerous journey: 2 progress per waypoint.")
    print("- Formidable journey: 1 progress per waypoint.")
    print("- Extreme journey: 2 ticks per waypoint.")
    print("- Epic journey: 1 tick per waypoint.")
    print("")
    print("Then, for each segment of your journey, roll +wits. If you are setting off")
    print("from a community with which you share a bond, add+1 to your initial roll.")
    print("")
    print("On a STRONG HIT, you reach a waypoint. If the waypoint is unknown to you,")
    print("envision it (Ask the Oracle if unsure). Then, choose one.")
    print("- You make good use of your resources: Make progress.")
    print("- You move at speed: Mark progress and take +1 momentum, but suffer -1")
    print("  supply.")
    print("")
    print("On a WEAK HIT, you reach a waypoint and mark progress, but suffer -1 supply.")
    print("")
    print("On a MISS, you are waylaid by a perilous event. Pay the Price.")
    status()

def reach_your_destination():
    print("\n\n--------------------------")
    print("Reach your Destination [8]")
    print("--------------------------")
    print("*Progress Move*")
    print("")
    print("When your journey comes to an end, roll the challenge dice and compare to")
    print("your progress. Momentum is ignored on this roll.")
    print("")
    print("On a STRONG HIT, the situation at your destination favors you. Choose one.")
    print("- Make another move now (not a progress move), and add +1.")
    print("- Take +1 momentum.")
    print("")
    print("On a WEAK HIT, you arrive but face an unforeseen hazard or complication.")
    print("Envision what you find (Ask the Oracle if unsure).")
    print("")
    print("On a MISS, you have gone hopelessly astray, your objective is lost to you,")
    print("or you were misled about your destination. If your journey continues,")
    print("clear all but one filled progress, and raise the journey's rank by one (if")
    print("not already epic).")
    status()

def compel():
    print("\n\n-----------")
    print("Compel [11]")
    print("-----------")
    print("When you attempt to persuade someone to do something, envision your")
    print("approach and roll. If you...")
    print("- Charm, pacify, barter, or convince: Roll +heart (add +1 if you share a")
    print("  bond).")
    print("- Threaten or incite: Roll +iron.")
    print("- Lie or swindle: Roll +shadow.")
    print("")
    print("On a STRONG HIT, they'll do what you want or share what they know. Take +1")
    print("momentum. If you use this exchange to Gather Information, make that move")
    print("now and add +1.")
    print("")
    print("On a WEAK HIT, as above, but they ask something of you in return. Envision")
    print("what they want (Ask the Oracle if unsure).")
    print("")
    print("On a MISS, they refuse or make a demand which costs you greatly. Pay the")
    print("Price.")
    status()

def sojourn():
    print("\n\n------------")
    print("Sojourn [12]")
    print("------------")
    print("When you spend time in a community seeking assistance, roll +heart. If you")
    print("share a bond, add +1.")
    print("")
    print("On a STRONG HIT, you and your allies may each choose two from within the")
    print("categories below. On a WEAK HIT, choose one. If you are share a bond,")
    print("choose one more.")
    print("")
    print("On a hit, you and your allies may each focus on one of your chosen recover")
    print("actions and roll +heart again. If you share a bond, add +1. On a strong")
    print("hit, take +2 more for that action. On a WEAK HIT, take +1 more. On a MISS,")
    print("it goes badly and you lose all benefits for that action.")
    print("")
    print("CLEAR A CONDITION")
    print("- Mend: Clear a wounded debility and take +1 health.")
    print("- Hearten: Clear a shaken debility and take +1 spirit.")
    print("- Equip: Clear an unprepared debility and take +1 supply.")
    print("")
    print("RECOVER")
    print("- Recuperate: Take +2 health for yourself and any companions.")
    print("- Consort: Take +2 spirit.")
    print("- Provision: Take +2 supply.")
    print("- Plan: Take +2 momentum.")
    print("")
    print("PROVIDE AID")
    print("- Take a quest: Envision what this community needs, or what trouble it is")
    print("  facing (Ask the Oracle if unsure). If you chose to help. Swear an Iron")
    print("  Vow and add +1.")
    print("")
    print("On a MISS, you find no help here. Pay the Price.")
    status()

def draw_the_circle():
    print("\n\n--------------------")
    print("Draw the Circle [13]")
    print("--------------------")
    print("When you challenge someone to a formal duel, or accept a challenge, roll")
    print("+heart. If you share a bond with this community, add +1.")
    print("")
    print("On a STRONG HIT, take +1 momentum. You may also choose up to two boasts")
    print("and take +1 momentum for each.")
    print("")
    print("On a WEAK HIT, you may choose one boast in exchange for +1 momentum.")
    print("- Grant first strike: Your foe has initiative.")
    print("- Bare yourself: Take no benefit for armor or shield; your foe's harm is")
    print("  +1.")
    print("- Hold no iron: Take no benefit of weapons; your harm is 1.")
    print("- Bloody yourself: Endure Harm (1 harm).")
    print("- To the death: One way or another, this fight must end with death.")
    print("")
    print("On a MISS, you begin the duel at a disadvantage. Your foe has initiative.")
    print("Pay the Price.")
    print("")
    print("Then, make moves to resolve the fight. If you are the victor, you may make")
    print("a lawful demand, and your opponent must comply or forfeit their honor and")
    print("standing. If you refuse the challenge, surrender, or are defeated, they")
    print("make a demand of you.")
    status()

def forge_a_bond():
    print("\n\n-----------------")
    print("Forge a Bond [14]")
    print("-----------------")
    print("When you spend significant time with a person or community, stand")
    print("together to face hardships, or make sacrifices for their cause, you can")
    print("attempt to create a bond. When you do, roll +heart. If you make this move")
    print("after your successfully Fulfill Your Vow to their benefit, you may reroll")
    print("any dice.")
    print("")
    print("On a STRONG HIT, make note of the bond, mark a tick on your bond progress")
    print("track, and choose one.")
    print("- Take +1 spirit.")
    print("- Take +2 momentum.")
    print("")
    print("On a WEAK HIT, they ask something more of you first. Envision what it is")
    print("(Ask the Oracle if unsure), do it (or Swear an Iron Vow), and mark the")
    print("bond. If you refuse or fail, Pay the Price.")
    print("")
    print("On a MISS, they reject you. Pay the Price.")
    status()

def test_your_bond():
    print("\n\n-------------------")
    print("Test your Bond [15]")
    print("-------------------")
    print("When your bond is tested through conflict, betrayal, or circumstance, roll")
    print("+heart.")
    print("")
    print("On a STRONG HIT, this test has strengthened your bond. Choose one.")
    print("- Take +1 spirit.")
    print("- Take +2 momentum")
    print("")
    print("On a WEAK HIT, your bond is fragile and you must prove your loyalty.")
    print("Envision what they ask of you (Ask the Oracle if unsure), and do it (or")
    print("Swear an Iron Vow). If you refuse or fail, clear the bond and Pay the")
    print("Price.")
    print("")
    print("On a MISS, or if you have no interest in maintaining this relationship,")
    print("clear the bond and Pay the Price.")
    status()

def aid_your_ally():
    print("\n\n------------------")
    print("Aid your Ally [16]")
    print("------------------")
    print("When you Secure an Advantage in direct support of an ally, and score a")
    print("hit, they (instead of you) can take the benefits of the move. If you are")
    print("in combat and score a strong hit, you and your ally have initiative.")
    status()

def write_your_epilogue():
    print("\n\n------------------------")
    print("Write your Epilogue [17]")
    print("------------------------")
    print("*Progress Move*")
    print("")
    print("When you retire from your life as Ironsworn, envision two things: What you")
    print("hope for, and what you fear. Then, roll the challenge dice and compare to")
    print("your bonds. Momentum is ignored on this roll.")
    print("")
    print("On a STRONG HIT, things come to pass as you hoped.")
    print("")
    print("On a WEAK HIT, your life takes an unexpected turn, but not necessarily for")
    print("the worse. You find yourself spending your days with someone or in a place")
    print("you did not foresee. Envision it (Ask the Oracle if unsure).")
    print("")
    print("On a MISS, your fears are realized.")
    status()

def enter_the_fray():
    print("\n\n-------------------")
    print("Enter the Fray [21]")
    print("-------------------")
    print("When you enter into combat, set the rank of each of your foes.")
    print("- Troublesome foe: 3 progress per harm; inflicts 1 harm.")
    print("- Dangerous foe: 2 progress per harm; inflicts 2 harm.")
    print("- Formidable foe: 1 progress per harm; inflicts 3 harm.")
    print("- Extreme foe: 2 ticks per harm; inflicts 4 harm.")
    print("- Epic foe: 1 tick per harm; inflicts 5 harm.")
    print("")
    print("Then, roll to determine who is in control. If you are...")
    print("- Facing off against your foe: Roll +heart.")
    print("- Moving into position against an unaware foe, or striking without")
    print("  warning: Roll +shadow.")
    print("- Ambushed: Roll +wits.")
    print("")
    print("On a STRONG HIT, take +2 momentum. You have initiative.")
    print("")
    print("On a WEAK HIT, choose one.")
    print("- Bolster your position: Take +2 momentum.")
    print("- Prepare to act: Take initiative.")
    print("")
    print("On a MISS, combat begins with you at a disadvantage Pay the Price. Your")
    print("foe has initiative.")
    status()

def strike():
    print("\n\n-----------")
    print("Strike [22]")
    print("-----------")
    print("When you have initiative and attack in close quarters, roll +iron. When")
    print("you have initiative and attak at range, roll +edge.")
    print("")
    print("On a STRONG HIT, inflict +1 harm. You retain initiative.")
    print("")
    print("On a WEAK HIT, inflict your harm and lose initiative.")
    print("")
    print("On a MISS, your attack fails and you must Pay the Price. Your foe has")
    print("initiative.")
    status()

def clash():
    print("\n\n----------")
    print("Clash [23]")
    print("----------")
    print("When your foe has initiative and you fight with them in close quarters,")
    print("roll +iron. When you exchange a volley at range, or shoot at an advancing")
    print("foe, roll +edge.")
    print("")
    print("On a STRONG HIT, inflict your harm and choose one. You have the initiative.")
    print("- You bolster your position: Take 1 momentum.")
    print("- You find an opening: Inflict +1 harm.")
    print("")
    print("On a WEAK HIT, inflict your harm, but then Pay the Price. Your foe has")
    print("initiative.")
    print("")
    print("On a MISS, you are outmatched and must Pay the Price. Your foe has")
    print("initiative.")
    status()

def turn_the_tide():
    print("\n\n------------------")
    print("Turn the Tide [24]")
    print("------------------")
    print("Once per fight, when you risk it all, you may steal initiative from your")
    print("foe to make a move (not a progress move). When you do, add +1 and take +1")
    print("momentum on a hit.")
    print("")
    print("If you fail to score a hit on that move, you must suffer a dire outcome.")
    print("Pay the Price.")
    status()

def end_the_fight():
    print("\n\n------------------")
    print("End the Fight [25]")
    print("------------------")
    print("*Progress Move*")
    print("")
    print("When you make a move to take decisive action, and score a strong hit, you")
    print("may resolve the outcome of this fight. If you do, roll the challenge dice")
    print("and compare to your progress. Momentum is ignored on this roll.")
    print("")
    print("On a STRONG HIT, this foe is no longer in the fight. They are killed, out")
    print("of action, flee, or surrender as appropriate to the situation and your")
    print("intent (Ask the Oracle if unsure).")
    print("")
    print("On a WEAK HIT, as above, but you must also choose one.")
    print("- It's worse than you thought: Endure Harm.")
    print("- You are overcome: Endure Stress.")
    print("- Your victory is short-lived: A new danger or foe appears, or an existing")
    print("  danger worsens.")
    print("- You suffer collateral damage: Something of value is lost or broken, or")
    print("  someone important must pay the cost.")
    print("- You'll pay for it: An objective falls out of reach.")
    print("- Others won't forget: You are marked for vengeance.")
    print("")
    print("On a MISS, you have lost this fight. Pay the price.")
    status()

def battle():
    print("\n\n-----------")
    print("Battle [26]")
    print("-----------")
    print("When you fight a battle, and it happens in a blur, envision your objective")
    print("and roll. If you primarily...")
    print("- Fight at range, or using your speed and the terrain to your advantage:")
    print("  Roll +edge.")
    print("- Fight depending on your courage, allies, or companions: Rolls +heart.")
    print("- Fight in close to overpower your opponents: Roll +iron.")
    print("- Fight using trickery to befuddle your opponents: Roll +shadow.")
    print("- Fight using careful tactics to outsmart your opponents: Roll +wits")
    print("")
    print("On a STRONG HIT, you achieve your objective unconditionally. Take +2")
    print("momentum.")
    print("")
    print("On a WEAK HIT, you achieve your objective, but not without cost. Pay the")
    print("Price.")
    print("")
    print("On a MISS, you are defeated and the objective is lost to you. Pay the")
    print("Price.")
    status()

def combat_moves():
    print("\n\n------------------------------------------")
    print("List of Other Moves to Make in Combat [27]")
    print("------------------------------------------")
    print("Secure an advantage: When acting to outwit or outmaneuver your foe, or")
    print("setting up another move.")
    print("")
    print("Face Danger: When overcoming an obstacle, avoiding a hazard, fleeing, or")
    print("evading an attack (without fighting back).")
    print("")
    print("Aid Your Ally: When making a move to give your ally an advantage.")
    print("")
    print("Compel: When surrendering, coercing your foe to stand down, or negotiating")
    print("a truce.")
    print("")
    print("Suffer Moves (all): When facing physical damage, mental trauma, or lack of")
    print("supply.")
    print("")
    print("Pay the Price: When suffering the outcome of a move.")
    print("")
    print("Ask the Oracle: When asking questions about combat events or your foe's")
    print("intent and actions.")
    print("\n")

def endure_harm():
    print("\n\n----------------")
    print("Endure Harm [31]")
    print("----------------")
    print("When you face physical damage, suffer -health equal to your foe's rank or")
    print("as appropriate to the situation. If your health is 0, suffer -momentum")
    print("equal to any remaining -health.")
    print("")
    print("Then, roll +health or +iron, whichever is higher.")
    print("")
    print("On a STRONG HIT, choose one.")
    print("- Shake it off: If your health is greater than 0, suffer -1 momentum in")
    print("  exchange for +1 health.")
    print("- Embrace the pain: Take +1 momentum.")
    print("")
    print("On a WEAK HIT, you press on.")
    print("")
    print("On a MISS, also suffer -1 momentum. If you are at 0 health, you must mark")
    print("wounded or maimed (if currently unmarked) or roll on the following")
    print("table. (31t)")
    status()

def endure_harm_table():
    print("\n\n-------------------------")
    print("Endure Harm (Table) [31t]")
    print("-------------------------")
    print("Roll    Result")
    print("--------------------------------------------------------------------------")
    print(" 1-10   The harm is mortal. Face Death.")
    print("11-20   You are dying. You need to Heal within an hour or two, or Face")
    print("        Death.")
    print("36-50   You are unconscious and out of action. If left alone, you come")
    print("        back to your senses in an hour or two. If you are vulnerable to a")
    print("        foe not inclined to show mercy, Face Death.")
    print("51-00   You are battered but still standing.")
    print("\n")

def face_death():
    print("\n\n---------------")
    print("Face Death [32]")
    print("---------------")
    print("When you are brought to the brink of death, and glimpse the world beyond,")
    print("roll +heart.")
    print("")
    print("On a STRONG HIT, death rejects you. You are cast back into the mortal")
    print("world.")
    print("")
    print("On a WEAK HIT, choose one.")
    print("- You die, but not before making a noble sacrifice. Envision your final")
    print("  moments.")
    print("- Death desires something of you in exchange for your life. Envision what")
    print("  it wants (Ask the Oracle if unsure), and Swear an Iron Vow (formidable")
    print("  or extreme) to complete that quest. If you fail to score a hit when you")
    print("  Swear an Iron Vow, or refuse the quest, you are dead. Otherwise, you")
    print("  return to the mortal world and are now cursed. You may only clear the")
    print("  cursed debility by completing the quest.")
    print("")
    print("On a MISS, you are dead.")
    status()

def companion_endure_harm():
    print("\n\n--------------------------")
    print("Companion Endure Harm [33]")
    print("--------------------------")
    print("When your companion faces physical damage, they suffer -health equal to")
    print("the amount of harm inflicted. If your companion's health is 0, exchange")
    print("any leftover -health for -momentum.")
    print("")
    print("Then, roll +heart or +your companion's health, whichever is higher.")
    print("")
    print("On a STRONG HIT, your companion rallies. Give them +1 health.")
    print("")
    print("On a WEAK HIT, your companion is battered. If their health is 0, they")
    print("cannot assist you until they gain at least +health.")
    print("")
    print("On a MISS, also suffer -1 momentum. If your companion's health is 0, they")
    print("are gravely wounded and out of action. Without aid, they die in an hour or")
    print("two.")
    print("")
    print("If you roll a miss with a 1 on your action die, and your companion's")
    print("health is 0, they are now dead. Take 1 experience for each marked ability")
    print("on your companion asset, and remove it.")
    status()

def endure_stress():
    print("\n\n------------------")
    print("Endure Stress [34]")
    print("------------------")
    print("When you face mental shock or stress, suffer -spirit equal to your foe's")
    print("rank or as appropriate to the situation. If your spirit is 0, suffer")
    print("-momentum equal to any remaining -spirit.")
    print("")
    print("Then, roll +spirit or +heart, whichever is higher.")
    print("")
    print("On a STRONG HIT, choose one.")
    print("- Shake it off: If your spirit is greater than 0, suffer -1 momentum in")
    print("  exchange for +1 spirit.")
    print("- Embrace the darkness: Take +1 momentum.")
    print("")
    print("On a WEAK HIT, you press on.")
    print("")
    print("On a MISS, also suffer -1 momentum. If you are at 0 spirit, you must mark")
    print("shaken or corrupted (if currently unmarked) or roll on the following")
    print("table. (34t)")
    status()

def endure_stress_table():
    print("\n\n---------------------------")
    print("Endure Stress (Table) [34t]")
    print("---------------------------")
    print("Roll    Result")
    print("--------------------------------------------------------------------------")
    print(" 1-10   You are overwhelmed. Face Desolation")
    print("11-25   You give up. Forsake Your Vow (if possible, one relevant to your")
    print("        current crisis).")
    print("26-50   You give in to a fear or compulsion, and act against your better")
    print("        instinct.")
    print("51-00   You persevere.")
    print("\n")

def face_desolation():
    print("\n\n--------------------")
    print("Face Desolation [35]")
    print("--------------------")
    print("When you are brought to the brink of desolation, roll +heart.")
    print("")
    print("On a STRONG HIT, you resist and press on.")
    print("")
    print("On a WEAK HIT, choose one.")
    print("- Your spirit or sanity breaks, but not before you make a noble sacrifice.")
    print("  Envision your final moments.")
    print("- You see a vision of a dreaded event coming to pass. Envision that dark")
    print("  future (Ask the Oracle if unsure), and Swear and Iron Vow (formidable or")
    print("  extreme) to prevent it. If you fail to score a hit when you Swear an")
    print("  Iron Vow, or refuse the quest, you are lost. Otherwise, you return to")
    print("  your senses and are now tormented. You may only clear the tormented")
    print("  debility by completing the quest.")
    print("")
    print("On a MISS, you succumb to despair or horror and are lost.")
    status()

def out_of_supply():
    print("\n\n------------------")
    print("Out of Supply [36]")
    print("------------------")
    print("When your supply is exhausted (reduced to 0), mark unprepared. If you")
    print("suffer additional -supply while unprepared, you must exchange each")
    print("additional -supply for any combination of -health, -spirit, or -momentum")
    print("as appropriate to the circumstances.")
    status()

def face_a_setback():
    print("\n\n-------------------")
    print("Face a Setback [37]")
    print("-------------------")
    print("When your momentum is at its minimum (-6), and you suffer additional")
    print("-momentum, choose one.")
    print("- Exchange each additional -momentum for any combination of -health,")
    print("  -spirit, or -supply as appropriate to the circumstances.")
    print("- Envision an event or discovery (Ask the Oracle if unsure) which")
    print("  undermines your progress in a current quest, journey or fight. Then, for")
    print("  each additional -momentum, clear 1 unit of progress on that track per")
    print("  its rank (troublesome=clear 3 progress; dangerous=clear 2 progress;)")
    print("  formidable=clear 1 progress; extreme=clear 2 ticks; epic=clear 1 tick).")
    status()

def swear_an_iron_vow():
    print("\n\n----------------------")
    print("Swear an Iron Vow [41]")
    print("----------------------")
    print("When you swear upon iron to complete a quest, write your vow and give the")
    print("quest a rank. Then, roll +heart. If you make this vow to a person or")
    print("community with whom you share a bond, add +1.")
    print("")
    print("On a STRONG HIT, you are emboldened and it is clear what you must do next")
    print("(Ask the Oracle if unsure). Take +2 momentum.")
    print("")
    print("On a WEAK HIT, you are determined but begin your quest with more questions")
    print("than answers. Take +1 momentum, and envision what you do to find a path")
    print("forward.")
    print("")
    print("On a MISS, you face a significant obstacle before you can begin your")
    print("quest. Envision what stands in your way (Ask the Oracle if unsure), and")
    print("choose one.")
    print("- You press on: Suffer -2 momentum, and do what you must do overcome this")
    print("  obstacle.")
    print("- You give up: Forsake Your Vow.")
    status()

def reach_a_milestone():
    print("\n\n----------------------")
    print("Reach a Milestone [42]")
    print("----------------------")
    print("When you make significant progress in your quest by overcoming a critical")
    print("obstacle, completing a perilous journey, solving a complex mystery,")
    print("defeating a powerful threat, gaining vital support, or acquiring a crucial")
    print("item, you may mark progress.")
    print("- Troublesome quest: Mark 3 progress.")
    print("- Dangerous quest: Mark 2 progress.")
    print("- Formidable quest: Mark 1 progress.")
    print("- Extreme quest: Mark 2 ticks.")
    print("- Epic quest: Mark 1 tick.")
    status()

def fulfill_your_vow():
    print("\n\n---------------------")
    print("Fulfill your Vow [43]")
    print("---------------------")
    print("*Progress Move*")
    print("")
    print("When you achieve what you believe to be the fulfillment of your vow, roll")
    print("the challenge dice and compare to your progress. Momentum is ignored on")
    print("this roll.")
    print("")
    print("On a STRONG HIT, your quest is complete. Mark experience (troublesome=1;")
    print("dangerous=2; formidable=3; extreme=4; epic=5).")
    print("")
    print("On a WEAK HIT, there is more to be done or you realize the truth of your")
    print("quest. Envision what you discover (Ask the Oracle if unsure). Then, mark")
    print("experience (troublesome=0; dangerous=1; formidable=2; extreme=3; epic=4).")
    print("You may Swear an Iron Vow to set things right. If you do, add +1.")
    print("")
    print("On a MISS, your quest is undone. Envision what happens (Ask the Oracle if")
    print("unsure), and choose one.")
    print("- You recommit: Clear all but one filled progress, and raise the quest's")
    print("  rank by one (if not already epic).")
    print("- You give up: Forsake Your Vow.")
    status()

def forsake_your_vow():
    print("\n\n---------------------")
    print("Forsake your Vow [44]")
    print("---------------------")
    print("When you renounce your quest, betray your promise, or the goal is lost to")
    print("you, clear the vow and Endure Stress. You suffer -spirit equal to the rank")
    print("of your quest (troublesome=1; dangerous=2; formidable=3; extreme=4; epic=5).")
    print("")
    print("If the vow was made to a person or community with whom you share a bond,")
    print("Test Your Bond when you next meet.")
    status()

def advance():
    print("\n\n------------")
    print("Advance [45]")
    print("------------")
    print("When you focus on your skills, receive training, find inspiration, earn a")
    print("reward, or gain a companion, you may spend 3 experience to add a new")
    print("asset, or 2 experience to upgrade an asset.")
    status()

def pay_the_price():
    print("\n\n------------------")
    print("Pay the Price [51]")
    print("------------------")
    print("When you suffer the outcome of a move, choose one.")
    print("- Make the most obvious negative outcome happen.")
    print("- Envision two negative outcomes. Rate one as 'likely', and Ask the Oracle")
    print("  using the yes/no table. On a 'yes', make that outcome happen. Otherwise,")
    print("  make it the other.")
    print("- Roll on the following table. If you have difficulty interpreting the")
    print("  result to fit the current situation, roll again. (51t)")
    status()

def pay_the_price_table():
    print("\n\n---------------------------")
    print("Pay the Price (Table) [51t]")
    print("---------------------------")
    print("Roll    Result")
    print("--------------------------------------------------------------------------")
    print(" 1-2    Roll again and apply that result but make it worse. If you roll")
    print("        this result yet again, think of something dreadful that changes")
    print("        course of your quest (Ask the Oracle if unsure) and make it happen.")
    print(" 3-5    A person or community you trusted loses faith in you, or acts")
    print("        against you.")
    print(" 6-9    A person or community you care about is exposed to danger.")
    print("10-16   You are separated from something or someone.")
    print("17-23   You action has an unintended effect.")
    print("24-32   Something of value is lost or destroyed.")
    print("33-41   The current situation worsens.")
    print("42-50   A new danger or foe is revealed.")
    print("51-59   It causes a delay or puts you at a disadvantage.")
    print("60-68   It is harmful")
    print("69-76   It is stressful.")
    print("77-85   A surprising development complicates your quest.")
    print("86-90   It wastes resources.")
    print("91-94   It forces you to act against your best intentions.")
    print("95-98   A friend, companion, or ally is put in harm's way (or you are, if")
    print("        alone).")
    print("99-00   Roll twice more on this table. Both results occur. If they are the")
    print("        same result, make it worse.")
    print("\n")

def ask_the_oracle():
    print("\n\n-------------------")
    print("Ask the Oracle [52]")
    print("-------------------")
    print("When you seek to resolve questions, discover details in the world,")
    print("determine how other characters respond, or trigger encounters or events,")
    print("you may...")
    print("- Draw a conclusion: Decide the answer based on the most interesting and")
    print("  obvious result.")
    print("- Ask a yes/no question: Decide the odds of a 'yes', and roll on the table")
    print("  below to check the answer.")
    print("- Pick two: Envision two options. Rate one as 'likely', and roll on the")
    print("  table below to see if it is true. If not, it is the other.")
    print("- Spark an idea: Brainstorm or use a random prompt.")
    print("")
    print("Odds             The answer is 'yes' if you roll...")
    print("--------------------------------------------------------------------------")
    print("Almost certain   11 or greater")
    print("Likely           26 or greater")
    print("50/50            51 or greater")
    print("Unlikely         76 or greater")
    print("Small chance     91 or greater")
    print("")
    print("On a match, an extreme result or twist has occurred.")
    print("\n")

def ask_the_oracle_table():
    print("\n\n----------------------------")
    print("Ask the Oracle (Table) [52t]")
    print("----------------------------")
    print("Odds             The answer is 'yes' if you roll...")
    print("--------------------------------------------------------------------------")
    print("Almost certain   11 or greater")
    print("Likely           26 or greater")
    print("50/50            51 or greater")
    print("Unlikely         76 or greater")
    print("Small chance     91 or greater")
    print("")
    print("On a match, an extreme result or twist has occurred.")
    print("\n")

# main ==============================================================
print("---------------------------------------")
print("| Ironsworn moves helper              |")
print("| RPG and text by Shawn Tomkin (2018) |")
print("|-------------------------------------|")
print("| Python script by Kenneth Hon (2019) |")
print("---------------------------------------\n")

move = input("Use in-build value for character? (Default = yes) ")
if move.lower() == 'n' or move.lower() == 'no':
    character = input("\nPlease enter your character's name > ")
    edge = input("Please enter your edge > ")
    heart = input("Please enter your heart > ")
    iron = input("Please enter your iron > ")
    shadow = input("Please enter your shadow > ")
    wits = input("Please enter your wits > ")
    momentum = input("Please enter your momentum > ")
    health = input("Please enter your health > ")
    spirit = input("Please enter your spirit > ")
    supply = input("Please enter your supply > ")
else:
    character = "Shawn"
    edge = 3
    heart = 2
    iron = 2
    shadow = 1
    wits = 1
    momentum = 5
    health = 5
    spirit = 5
    supply = 5

status()

while move != 'q' and move != 'quit':
    move = input("Please enter your move > ")
    move = move.lower()
    if move == 'z':
        status()
    elif move == 'zl':
        status_long()
    elif move == 'l' or move == 'm' or move == 'moves' or move == 'move':
        moves()
    elif move == 'o' or move == 'oracle':
        oracle()
    elif move == 'r' or move == 'roll' or move == 'roll dice':
        x = randint(1, 10)
        y = randint(1, 10)
        z = randint(1, 6)
        if x == y:
            print("\nChallenge dice =", x, "and", y, "(Match!)")
        else:
            print("\nChallenge dice =", x, "and", y)
        print("Action die =", z, "\n")
    elif move == 'd6' or move == 'roll d6':
        x = randint(1, 6)
        print("\n1d6:", x)
        print("\n")
    elif move == 'd10' or move == 'roll d10':
        x = randint(1, 10)
        print("\n1d10:", x)
        print("\n")
    elif move == '2d10' or move == 'roll 2d10':
        x = randint(1, 10)
        y = randint(1, 10)
        if x == y:
            print("\n2d10:", x, "and", y, "(Match!)")
        else:
            print("\n2d10:", x, "and", y)
        print("\n")
    elif move == 'd100' or move == 'roll d100':
        x = randint(1, 100)
        print("\n1d100:", x)
        print("\n")
    elif move == '1' or move == 'face danger':
        face_danger()
    elif move == '2' or move == 'secure an advantage':
        secure_an_advantage()
    elif move == '3' or move == 'gather information':
        gather_information()
    elif move == '4' or move == 'heal':
        heal()
    elif move == '5' or move == 'resupply':
        resupply()
    elif move == '6' or move == 'make camp':
        make_camp()
    elif move == '7' or move == 'undertake a journey':
        undertake_a_journey()
    elif move == '8' or move == 'reach your destination':
        reach_your_destination()
    elif move == '11' or move == 'compel':
        compel()
    elif move == '12' or move == 'sojourn':
        sojourn()
    elif move == '13' or move == 'draw the circle':
        draw_the_circle()
    elif move == '14' or move == 'forge a bond':
        forge_a_bond()
    elif move == '15' or move == 'test your bond':
        test_your_bond()
    elif move == '16' or move == 'aid your ally':
        aid_your_ally()
    elif move == '17' or move == 'write your epilogue':
        write_your_epilogue()
    elif move == '21' or move == 'enter the fray':
        enter_the_fray()
    elif move == '22' or move == 'strike':
        strike()
    elif move == '23' or move == 'clash':
        clash()
    elif move == '24' or move == 'turn the tide':
        turn_the_tide()
    elif move == '25' or move == 'end the fight':
        end_the_fight()
    elif move == '26' or move == 'battle':
        battle()
    elif move == '27' or move == 'lc' or move == 'çombat moves' or move == 'l combat':
        combat_moves()
    elif move == '31' or move == 'endure harm':
        endure_harm()
    elif move == '31t' or move == 'endure harm table':
        endure_harm_table()
    elif move == '32' or move == 'face death':
        face_death()
    elif move == '33' or move == 'companion endure harm':
        companion_endure_harm()
    elif move == '34' or move == 'endure stress':
        endure_stress()
    elif move == '34t' or move == 'endures stress table':
        endure_stress_table()
    elif move == '35' or move == 'face desolation':
        face_desolation()
    elif move == '36' or move == 'out of supply':
        out_of_supply()
    elif move == '37' or move == 'face a setback':
        face_a_setback()
    elif move == '41' or move == 'swear an iron vow':
        swear_an_iron_vow()
    elif move == '42' or move == 'reach a milestone':
        reach_a_milestone()
    elif move == '43' or move == 'fulfill your vow':
        fulfill_your_vow()
    elif move == '44' or move == 'forsake your vow':
        forsake_your_vow()
    elif move == '45' or move == 'advance':
        advance()
    elif move == '51' or move == 'pay the price':
        pay_the_price()
    elif move == '51t' or move == 'pay the price table':
        pay_the_price_table()
    elif move == '52' or move == 'ask the oracle':
        ask_the_oracle()
    elif move == '52t' or move == 'ask the oracle table':
        ask_the_oracle_table()
    elif move == 'momentum':
        x = input("\nChange momentum by how much > ")
        momentum = momentum + int(x)
        print("Momentum is now ", momentum, "\n")
    elif move == 'health':
        x = input("\nChange health by how much > ")
        health = health + int(x)
        print("Health is now ", health, "\n")
    elif move == 'spirit':
        x = input("\nChange spirit by how much > ")
        spirit = spirit + int(x)
        print("Spirit is now ", spirit, "\n")
    elif move == 'supply':
        x = input("\nChange supply by how much > ")
        supply = supply + int(x)
        print("Supply is now ", supply, "\n")
